<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>continuous integration on Maciek's blog</title><link>https://mmakowski.github.io/blog/tags/continuous-integration/</link><description>Recent content in continuous integration on Maciek's blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 15 Aug 2011 00:00:00 +0000</lastBuildDate><atom:link href="https://mmakowski.github.io/blog/tags/continuous-integration/index.xml" rel="self" type="application/rss+xml"/><item><title>Setting up BuildBot with Windows Slave on AWS EC2</title><link>https://mmakowski.github.io/blog/technology/setting-up-buildbot-with-windows-slave-on-aws-ec2/</link><pubDate>Mon, 15 Aug 2011 00:00:00 +0000</pubDate><guid>https://mmakowski.github.io/blog/technology/setting-up-buildbot-with-windows-slave-on-aws-ec2/</guid><description>Not long ago I set up a BuildBot instance for wxHaskell and thought about sharing my experience with configuring all the elements of the system. Johan Tibell’s commentary to the State of Haskell, 2011 survey, and his call for Windows bots to test Hackage libraries, prompted me to finally put my notes together into tutorial of a sort. There is nothing Haskell-specific, so if you are looking to automate Windows builds of apps written in any other language this guide should provide all the info you need.</description></item><item><title>Integration Testing with TeamCity</title><link>https://mmakowski.github.io/blog/technology/integration-testing-with-teamcity/</link><pubDate>Fri, 20 Aug 2010 00:00:00 +0000</pubDate><guid>https://mmakowski.github.io/blog/technology/integration-testing-with-teamcity/</guid><description>Inspired by a recent seminar Ken Schwaber presented at the company I work for, I decided to provide the means for ensuring that the high-level functionality of an application package built in our continuous integration environment (we use TeamCity) can be tested automatically.
The Context Suppose we are working on a stand-alone java app (let’s call it tc-rec, after the app I have been setting up integration tests for) and have an existing build which generates a zip file containing all the jars and scripts required to run the app.</description></item></channel></rss>