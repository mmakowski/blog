<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>haskell on Maciek's blog</title><link>http://mmakowski.github.io/blog/tags/haskell/</link><description>Recent content in haskell on Maciek's blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 08 Oct 2014 00:00:00 +0000</lastBuildDate><atom:link href="http://mmakowski.github.io/blog/tags/haskell/index.xml" rel="self" type="application/rss+xml"/><item><title>Haskell Exchange 2014</title><link>http://mmakowski.github.io/blog/technology/haskell-exchange-2014/</link><pubDate>Wed, 08 Oct 2014 00:00:00 +0000</pubDate><guid>http://mmakowski.github.io/blog/technology/haskell-exchange-2014/</guid><description>I was surprised to find that despite all-star line-up of speakers, this year’s Haskell Exchange was not as well attended and lower key than the 2013 edition. We were back to SkillsMatter headquarters, this time round with gym music blasting from the speakers during breaks and with no aircon for added frowziness. The talks were good though, some of them very much so.
Safe, Zero-Cost Coercions in Haskell Simon Peyton-Jones arrived bare-footed and dispelled one of the illusions I have been holding on to for quite a while, that the minimal core language of GHC, System FC, is sound beyond any reasonable doubt.</description></item><item><title>Haskell Exchange 2013</title><link>http://mmakowski.github.io/blog/technology/haskell-exchange-2013/</link><pubDate>Wed, 09 Oct 2013 00:00:00 +0000</pubDate><guid>http://mmakowski.github.io/blog/technology/haskell-exchange-2013/</guid><description>The second edition of Haskell Exchange has seen over 70 enthusiasts – primarily from London area, but Hungarian and German contingents were noticeable as well – gathered in a crypt of a church in Clerkenwell. The schedule was intense, so unlike with the events I related in the past I won’t attempt to describe all of the talks in detail, but will just focus on the ones which I found particularly intriguing – i.</description></item><item><title>Functional Programming Exchange 2013</title><link>http://mmakowski.github.io/blog/technology/functional-programming-exchange-2013/</link><pubDate>Fri, 15 Mar 2013 00:00:00 +0000</pubDate><guid>http://mmakowski.github.io/blog/technology/functional-programming-exchange-2013/</guid><description>After slightly disappointing FPX 2012, this year’s edition of Skills Matter-run one day gathering of functional programming enthusiasts bounced back with promising speaker line-up. The participant numbers were up compared to last year and seem to have even exceeded the excellent 2011 edition.
Adventures with Types in Haskell If anyone had any doubt about the reputation Simon Peyton Jones enjoys in fuctional programming community, the enthusiastic welcome he received must have dispelled it.</description></item><item><title>Functional Programming Exchange 2011</title><link>http://mmakowski.github.io/blog/technology/functional-programming-exchange-2011/</link><pubDate>Sun, 20 Mar 2011 00:00:00 +0000</pubDate><guid>http://mmakowski.github.io/blog/technology/functional-programming-exchange-2011/</guid><description>After the success that Scala LiftOff London 2010 was I didn’t hesitate long before signing up for a number of other Scala and functional programming events hosted by Skills Matter. The first of them was Functional Programming Exchange. Below are notes from most of the sessions of this one-day conference.
Managing Parallelism - Embrace Diversity The event started with Simon Peyton Jones discussing the importance of parallel computing, how different problems call for different approaches and how functional languages (and Haskell in particular) are well suited for the task.</description></item><item><title>Haskell MVC</title><link>http://mmakowski.github.io/blog/technology/haskell-mvc/</link><pubDate>Thu, 10 Mar 2011 00:00:00 +0000</pubDate><guid>http://mmakowski.github.io/blog/technology/haskell-mvc/</guid><description>with wxHaskell and STM
With popularity of Haskell raising in recent years I have decided to have a look at how suitable it is as a general-purpose programming language. The experiment involves writing a Windows client for FIBS.
It turned out to be far from easy.
It might be down to my lack of familiarity with functional programming patterns. Or perhaps, despite growing popularity, there are still no established FP GUI patterns yet.</description></item></channel></rss>