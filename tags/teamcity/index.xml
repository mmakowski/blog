<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>teamcity on Maciek's blog</title><link>http://mmakowski.github.io/blog/tags/teamcity/</link><description>Recent content in teamcity on Maciek's blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 20 Aug 2010 00:00:00 +0000</lastBuildDate><atom:link href="http://mmakowski.github.io/blog/tags/teamcity/index.xml" rel="self" type="application/rss+xml"/><item><title>Integration Testing with TeamCity</title><link>http://mmakowski.github.io/blog/technology/integration-testing-with-teamcity/</link><pubDate>Fri, 20 Aug 2010 00:00:00 +0000</pubDate><guid>http://mmakowski.github.io/blog/technology/integration-testing-with-teamcity/</guid><description>Inspired by a recent seminar Ken Schwaber presented at the company I work for, I decided to provide the means for ensuring that the high-level functionality of an application package built in our continuous integration environment (we use TeamCity) can be tested automatically.
The Context Suppose we are working on a stand-alone java app (letâ€™s call it tc-rec, after the app I have been setting up integration tests for) and have an existing build which generates a zip file containing all the jars and scripts required to run the app.</description></item></channel></rss>