<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>testing on Maciek's blog</title><link>http://mmakowski.github.io/blog/tags/testing/</link><description>Recent content in testing on Maciek's blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 02 Sep 2017 00:00:00 +0000</lastBuildDate><atom:link href="http://mmakowski.github.io/blog/tags/testing/index.xml" rel="self" type="application/rss+xml"/><item><title>A Software Developer's Take on Zeppelin Notebooks</title><link>http://mmakowski.github.io/blog/technology/a-software-developers-take-on-zeppelin-notebooks/</link><pubDate>Sat, 02 Sep 2017 00:00:00 +0000</pubDate><guid>http://mmakowski.github.io/blog/technology/a-software-developers-take-on-zeppelin-notebooks/</guid><description>For the past two months I have used Zeppelin-based notebooks as my primary IDE for data exploration, experiment documentation and prototyping of production code. While the former two notebook use cases are perfectly legitimate, I would argue that Zeppelin is poorly suited for production code prototyping. This is primarily due to high barrier to extraction of common code to libraries. In Jupyter, for example, all it takes to extract a function to a shareable module is to copy it from the notebook to a Python file stored in the same directory as the notebook.</description></item><item><title>Test of Github as a Tutorial Hosting Platform - Literate Specifications with specs2</title><link>http://mmakowski.github.io/blog/technology/test-of-github-as-a-tutorial-hosting-platform-literate-specifications-with-specs2/</link><pubDate>Sun, 15 Jan 2012 00:00:00 +0000</pubDate><guid>http://mmakowski.github.io/blog/technology/test-of-github-as-a-tutorial-hosting-platform-literate-specifications-with-specs2/</guid><description>This is an experiment with how well Github is suited to host coding tutorials. Turns out that the navigation and presentation could be a bit better, but overall it seems to be fairly usable. And since the tutorial has the form of a git repository, we are not restricted to using Github, but can come up with software that is specifically designed to present the subsequent commits as steps of a tutorial… clearly, DVCS and self-contained repositories are very powerful ideas.</description></item><item><title>E-mail Testing with Mock SMTP Server</title><link>http://mmakowski.github.io/blog/technology/e-mail-testing-with-mock-smtp-server/</link><pubDate>Fri, 20 Aug 2010 00:00:00 +0000</pubDate><guid>http://mmakowski.github.io/blog/technology/e-mail-testing-with-mock-smtp-server/</guid><description>If our application can send e-mail (and, according to Letts’ Law, it eventually will), we would want our integration tests to verify that the e-mail has indeed been sent, and that its contents are as expected. If we have written the integration tests in Python this will be pretty straightforward: Python library provides smtpd package with an implementation of SMTP server class, all we need to do is extend it to store the received messages and provide a way for the test code to verify that message has indeed been received.</description></item><item><title>Integration Testing with TeamCity</title><link>http://mmakowski.github.io/blog/technology/integration-testing-with-teamcity/</link><pubDate>Fri, 20 Aug 2010 00:00:00 +0000</pubDate><guid>http://mmakowski.github.io/blog/technology/integration-testing-with-teamcity/</guid><description>Inspired by a recent seminar Ken Schwaber presented at the company I work for, I decided to provide the means for ensuring that the high-level functionality of an application package built in our continuous integration environment (we use TeamCity) can be tested automatically.
The Context Suppose we are working on a stand-alone java app (let’s call it tc-rec, after the app I have been setting up integration tests for) and have an existing build which generates a zip file containing all the jars and scripts required to run the app.</description></item></channel></rss>