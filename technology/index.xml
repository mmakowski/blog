<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Technology on Maciek's blog</title><link>https://blog.mmakowski.com/technology/</link><description>Recent content in Technology on Maciek's blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 24 Jul 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.mmakowski.com/technology/index.xml" rel="self" type="application/rss+xml"/><item><title>Welcome to the Fediverse</title><link>https://blog.mmakowski.com/technology/welcome-to-the-fediverse/</link><pubDate>Sun, 24 Jul 2022 00:00:00 +0000</pubDate><guid>https://blog.mmakowski.com/technology/welcome-to-the-fediverse/</guid><description>In April, in the wake of Elon Musk&amp;rsquo;s move to acquire Twitter, Andi McClure left that platform for Mastodon. Andi&amp;rsquo;s tweets and retweets have been for me a continuous source of wonder and delight, so I moved after her.
Unlike Twitter, which is centralised, Mastodon is a collection of servers (instances) that communicate with each other. They use the ActivityPub protocol, which is a W3C-recommended standard for publishing and receiving all kinds of status updates.</description></item><item><title>Creating slide decks in Jupyter notebook</title><link>https://blog.mmakowski.com/technology/creating-slide-decks-in-jupyter-notebook/</link><pubDate>Sun, 31 Mar 2019 00:00:00 +0000</pubDate><guid>https://blog.mmakowski.com/technology/creating-slide-decks-in-jupyter-notebook/</guid><description>My job involves organising and analysing data, and training and evaluating machine learning models. In addition, the customers like to see demonstrations or progress updates for their models, so every now and then I also have to put together a slide deck. For better or worse, I use Jupyter notebooks as the main tool for the data management part, so I thought it would be convenient to prepare my slides in the same environment.</description></item><item><title>KDD 2018: The Rest</title><link>https://blog.mmakowski.com/technology/kdd-2018-the-rest/</link><pubDate>Mon, 27 Aug 2018 00:00:00 +0000</pubDate><guid>https://blog.mmakowski.com/technology/kdd-2018-the-rest/</guid><description>KDD 2018 was intense. Workshops and keynotes started at 8 AM and the poster sessions were runing until 9 PM. There was a dozen tracks running in parallel, so choosing the session to attend was hard – there was always something else potentially interesting going on at the same time. For the first two days I tried to pay close attention and write up comprehensible notes from the tutorials and workshops, but that was not sustainable, so from the third day on I sat back, relaxed, listened more, wrote less.</description></item><item><title>KDD 2018: Quantum Machine Learning</title><link>https://blog.mmakowski.com/technology/kdd-2018-quantum-machine-learning/</link><pubDate>Tue, 21 Aug 2018 00:00:00 +0000</pubDate><guid>https://blog.mmakowski.com/technology/kdd-2018-quantum-machine-learning/</guid><description>It must be an exciting time for quantum computing researches. Up until a few years ago all work in this domain was about building theoretical models of what will be possible once we have a quantum computer. Today, a number of companies have built and made available physical quantum computers. So far those are toy-size, proofs of concept, with no practical application, but this gives hope that practical devices will become available in a few years’ time, so wider community should take notice.</description></item><item><title>KDD 2018: Common Model Infrastructure</title><link>https://blog.mmakowski.com/technology/kdd-2018-common-model-infrastructure/</link><pubDate>Mon, 20 Aug 2018 00:00:00 +0000</pubDate><guid>https://blog.mmakowski.com/technology/kdd-2018-common-model-infrastructure/</guid><description>Go away and have fun building models like there is no tomorrow. After all, we do the real creative work, innovation, science. The software and operations engineers just deal with the plumbing and have an easy, predictable job compared to us, data scientists. This might not be a mindset many would admit to, but subconciously we do tend to underestimate the importance of others’ jobs. To be fair, the enginneering and operations folks are not much better in this respect – everyone tends to think their work is more demanding and output more valuable than average.</description></item><item><title>KDD 2018: Explainable Models for Healthcare AI</title><link>https://blog.mmakowski.com/technology/kdd-2018-explainable-models-for-healthcare-ai/</link><pubDate>Mon, 20 Aug 2018 00:00:00 +0000</pubDate><guid>https://blog.mmakowski.com/technology/kdd-2018-explainable-models-for-healthcare-ai/</guid><description>The Explainable Models for Healthcare AI tutorial was presented by a trio from KenSci Inc. that included a data scientist and a clinician. The premise of the session was that explainability is particularly important in healthcare applications of machine learning, due to the far-reaching consequences of decisions, high cost of mistakes, fairness and compliance requirements. The tutorial walked through a number of aspects of interpretability and discussed techniques that can be applied to explain model predictions.</description></item><item><title>KDD 2018: Deep Learning for Computational Health</title><link>https://blog.mmakowski.com/technology/kdd-2018-deep-learning-for-computational-health/</link><pubDate>Sun, 19 Aug 2018 00:00:00 +0000</pubDate><guid>https://blog.mmakowski.com/technology/kdd-2018-deep-learning-for-computational-health/</guid><description>The Deep Learnig for Computational Health tutorial was presented by Jimeng Sun, Edward Choi and Cao Xiao. With the electronic health record (EHR) data comprising free text, structured codes, time series and images, a wide range of deep learning techniques has been successfully applied to their analysis. The presenters focussed on capturing the information about the sequence of patient’s visits, interpretability of models and representation learning for textual and structured data.</description></item><item><title>Precision confidence interval in the presence of unreliable labels</title><link>https://blog.mmakowski.com/technology/precision-confidence-interval-in-the-presence-of-unreliable-labels/</link><pubDate>Tue, 07 Aug 2018 00:00:00 +0000</pubDate><guid>https://blog.mmakowski.com/technology/precision-confidence-interval-in-the-presence-of-unreliable-labels/</guid><description>Consider a binary classifier that produced the following counts of true positives (TP) and false positives (FP) on test data.
tp_observed = 5285 fp_observed = 3184 We would like to know the 95% confidence interval for precision metric of this classifier. Goutte and Gaussier showed that precision follows the Beta distribution with the counts of TPs and FPs as parameters, adjusted for prior. We will use uniform prior, $Beta(1,1)$.
import pymc3 as pm with pm.</description></item><item><title>RAPIDS 2018</title><link>https://blog.mmakowski.com/technology/rapids-2018/</link><pubDate>Thu, 19 Jul 2018 00:00:00 +0000</pubDate><guid>https://blog.mmakowski.com/technology/rapids-2018/</guid><description>Having for the last year incessantly worried about the day when someone asks how we achieved a certain model metric, and not being able to answer or even replicate the result, I found the subject of Reproducibility and Provenance in Data Science mini-conference – RAPIDS in short – much to my interest. The solutions to the provenance tracking and reproducibility problem I came up with so far were hand-cranked and built on top of tools whose selection was influenced more by my personal preferences than the prevailing industry practices.</description></item><item><title>Machine Learning in Three Pages</title><link>https://blog.mmakowski.com/technology/machine-learning-in-three-pages/</link><pubDate>Sat, 19 May 2018 00:00:00 +0000</pubDate><guid>https://blog.mmakowski.com/technology/machine-learning-in-three-pages/</guid><description>A supervised machine learning problem can be viewed as approximating an unknown target function $f:\mathcal{X}\rightarrow \mathcal{Y}$ by constructing a function $\hat{f}:\mathcal{X}\rightarrow \mathcal{Y}$ using a set of $k$ training examples $T=\{\left&amp;lt;X_i, Y_i\right&amp;gt; | i=1..k, X_i\in\mathcal{X}, Y_i=f(X_i)\}$. The function $\hat{f}$ is referred to as a model. The goal of machine learning is to construct the model in such a way that its results on $X\in\mathcal{X}\setminus T$ are close – according to some measure – to $f(X)$.</description></item><item><title>A Software Developer's Take on Zeppelin Notebooks</title><link>https://blog.mmakowski.com/technology/a-software-developers-take-on-zeppelin-notebooks/</link><pubDate>Sat, 02 Sep 2017 00:00:00 +0000</pubDate><guid>https://blog.mmakowski.com/technology/a-software-developers-take-on-zeppelin-notebooks/</guid><description>For the past two months I have used Zeppelin-based notebooks as my primary IDE for data exploration, experiment documentation and prototyping of production code. While the former two notebook use cases are perfectly legitimate, I would argue that Zeppelin is poorly suited for production code prototyping. This is primarily due to high barrier to extraction of common code to libraries. In Jupyter, for example, all it takes to extract a function to a shareable module is to copy it from the notebook to a Python file stored in the same directory as the notebook.</description></item><item><title>Digital Hygiene Part 3: Alternative to Google</title><link>https://blog.mmakowski.com/technology/digital-hygiene-part-3-alternative-to-google/</link><pubDate>Wed, 21 Dec 2016 00:00:00 +0000</pubDate><guid>https://blog.mmakowski.com/technology/digital-hygiene-part-3-alternative-to-google/</guid><description>I vaguely remember Internet search before Google. There was AltaVista and perhaps some other contenders, like Inktomi, Lycos or Excite. Google blew them all out of the water in early 2000s, thanks to minimalistic, user-friendly and search-focused home page and relevant results, not polluted by “sponsored entries”. Over the next decade this evolved into effective monopoly of Internet search, efforts from heavyweight competitors (Microsoft Bing) notwithstanding. Meanwhile, Google spread into multitude of other services whose competitive edge relied on vast amount of knowledge about our habits, interests and values, accumulated as a result of us using those services and giving the data away in return.</description></item><item><title>Digital Hygiene Part 2: Password Manager</title><link>https://blog.mmakowski.com/technology/digital-hygiene-part-2-password-manager/</link><pubDate>Sun, 11 Dec 2016 00:00:00 +0000</pubDate><guid>https://blog.mmakowski.com/technology/digital-hygiene-part-2-password-manager/</guid><description>In this installment we are going to look at the elephant in the room of digital security: passwords. Two most common sins against security committed by millions, or billions of Internet users are 1) weak passwords and 2) password reuse. It is now widely recognised that it is not the users who are to blame, but the password system itself. It is inconceivable that a single person can remember dozens of different, complicated passwords for different online services the modern world all but forces us to use.</description></item><item><title>Digital Hygiene Part 1: VPN</title><link>https://blog.mmakowski.com/technology/digital-hygiene-part-1-vpn/</link><pubDate>Wed, 30 Nov 2016 00:00:00 +0000</pubDate><guid>https://blog.mmakowski.com/technology/digital-hygiene-part-1-vpn/</guid><description>A few years ago I used to not care much about the digital trail I left all over the internet. The optimistic assumption “nothing to hide, nothing to fear”, convenience of numerous new services that offered some minor perk in exchange for my data, and the general trend for the population of developed world to share more and more, all pushed in that direction. Since then, a couple of developments changed my attitude.</description></item><item><title>Introduction to Lambda Calculus</title><link>https://blog.mmakowski.com/technology/introduction-to-lambda-calculus/</link><pubDate>Wed, 26 Oct 2016 00:00:00 +0000</pubDate><guid>https://blog.mmakowski.com/technology/introduction-to-lambda-calculus/</guid><description>Software is pervasive in the modern world and has influence over many aspects of our lives. In some cases, such as avionics or medical equipment control, human life depends on the correctness of software. Yet, high profile cases of bugs do not inspire confidence in the state of software engineering.
The “software crisis” is a phenomenon recognised by practitioners of the field. Several ways of addressing the reliability issue have been proposed: from reliance on programmer’s discipline, through tools that perform post-hoc validation of programs to ensure they do not contain suspicious coding patterns, to languages that restrict valid programs to ones whose properties can be formally proven.</description></item><item><title>Datapalooza, or IBM's Land Grab</title><link>https://blog.mmakowski.com/technology/datapalooza-or-ibms-land-grab/</link><pubDate>Thu, 30 Jun 2016 00:00:00 +0000</pubDate><guid>https://blog.mmakowski.com/technology/datapalooza-or-ibms-land-grab/</guid><description>IBM Watson’s spectacular success in Jeopardy a couple years ago was widely reported and highlighted the fact that the company, not generally considered to be at the forefront of technological innovation for the past 15 years or so, is attempting to carve for itself a large slice of the big data/data science/machine learning/cognitive computing/whatever term is fashionable this week pie. I did not appreciate the scope of their foray into this space until the Datapalooza Mashup event today.</description></item><item><title>Build or Buy</title><link>https://blog.mmakowski.com/technology/build-or-buy/</link><pubDate>Sat, 19 Dec 2015 00:00:00 +0000</pubDate><guid>https://blog.mmakowski.com/technology/build-or-buy/</guid><description>As programmers, whenever we embark on writing a piece of code, we risk being accused of reinventing the wheel and succumbing to Not Invented Here syndrome. There are nowadays dozens of libraries, framework and other software products of some description for every task imaginable. Yet, the answer to buy vs. build is not as clear-cut as might appear at a glance. The Programmer’s Paradox blog post which made rounds in programming circles in November points out that effective use of third-party software requires deep understanding of its inner workings.</description></item><item><title>A Pitfall of Global Execution Context</title><link>https://blog.mmakowski.com/technology/a-pitfall-of-global-execution-context/</link><pubDate>Sat, 28 Nov 2015 00:00:00 +0000</pubDate><guid>https://blog.mmakowski.com/technology/a-pitfall-of-global-execution-context/</guid><description>The convenience of Scala’s Future concept makes it the default tool for all kinds of programming tasks that call for asynchrony. There seems nothing simpler than wrapping a block of code in future { }, then, when compilation fails, importing scala.concurrent.ExecutionContext.Implicits.global, and we’re done, the code runs asynchronously. We can then use the computed result (if any) in further futures, or if we want to break out of the future world, do Await.</description></item><item><title>Scala in North Lakes</title><link>https://blog.mmakowski.com/technology/scala-in-north-lakes/</link><pubDate>Wed, 23 Sep 2015 00:00:00 +0000</pubDate><guid>https://blog.mmakowski.com/technology/scala-in-north-lakes/</guid><description>A Scala conference, far from any significant technology hub? With no call for papers? With hikes planned in what is one of the wettest parts of the country? Without Martin Odersky? What could possibly go wrong? A lot. But, apart from a few of the speakers not making it, nothing did, and Scala World was probably as good as a Scala conference can get.
Instead of summarising individual talks, I will focus on the major themes.</description></item><item><title>Haskell Exchange 2014</title><link>https://blog.mmakowski.com/technology/haskell-exchange-2014/</link><pubDate>Wed, 08 Oct 2014 00:00:00 +0000</pubDate><guid>https://blog.mmakowski.com/technology/haskell-exchange-2014/</guid><description>I was surprised to find that despite all-star line-up of speakers, this year’s Haskell Exchange was not as well attended and lower key than the 2013 edition. We were back to SkillsMatter headquarters, this time round with gym music blasting from the speakers during breaks and with no aircon for added frowziness. The talks were good though, some of them very much so.
Safe, Zero-Cost Coercions in Haskell Simon Peyton-Jones arrived bare-footed and dispelled one of the illusions I have been holding on to for quite a while, that the minimal core language of GHC, System FC, is sound beyond any reasonable doubt.</description></item><item><title>Haskell Exchange 2013</title><link>https://blog.mmakowski.com/technology/haskell-exchange-2013/</link><pubDate>Wed, 09 Oct 2013 00:00:00 +0000</pubDate><guid>https://blog.mmakowski.com/technology/haskell-exchange-2013/</guid><description>The second edition of Haskell Exchange has seen over 70 enthusiasts – primarily from London area, but Hungarian and German contingents were noticeable as well – gathered in a crypt of a church in Clerkenwell. The schedule was intense, so unlike with the events I related in the past I won’t attempt to describe all of the talks in detail, but will just focus on the ones which I found particularly intriguing – i.</description></item><item><title>Scala Futures on a Single Thread</title><link>https://blog.mmakowski.com/technology/scala-futures-on-a-single-thread/</link><pubDate>Sat, 05 Oct 2013 00:00:00 +0000</pubDate><guid>https://blog.mmakowski.com/technology/scala-futures-on-a-single-thread/</guid><description>Futures, introduced into Scala standard library in version 2.10, quickly became one of the cornerstones of Scala concurrency. Their main selling point is the ease of composition. A standard example of that involves asynchronous calls to a number of remote services and computation of the answer once all of the responses are collected:
def price(itemId: Id): Future[Price] = ??? def availability(itemId: Id): Future[Int] = ??? def orderQuote(itemId: Id, quantityRequired: Int): Future[Option[Price]] = for { unitPrice &amp;lt;- price(itemId) quantityAvailable &amp;lt;- availability(itemId) } yield if (quantityAvailable &amp;gt;= quantityRequired) Some(quantityRequired * unitPrice) else None Here price and availability are service calls that can potentially take long time and are meant to be executed in parallel.</description></item><item><title>Functional Programming Exchange 2013</title><link>https://blog.mmakowski.com/technology/functional-programming-exchange-2013/</link><pubDate>Fri, 15 Mar 2013 00:00:00 +0000</pubDate><guid>https://blog.mmakowski.com/technology/functional-programming-exchange-2013/</guid><description>After slightly disappointing FPX 2012, this year’s edition of Skills Matter-run one day gathering of functional programming enthusiasts bounced back with promising speaker line-up. The participant numbers were up compared to last year and seem to have even exceeded the excellent 2011 edition.
Adventures with Types in Haskell If anyone had any doubt about the reputation Simon Peyton Jones enjoys in fuctional programming community, the enthusiastic welcome he received must have dispelled it.</description></item><item><title>Five Languages</title><link>https://blog.mmakowski.com/technology/five-languages/</link><pubDate>Sun, 13 Jan 2013 00:00:00 +0000</pubDate><guid>https://blog.mmakowski.com/technology/five-languages/</guid><description>Pick three to five programming languages for teaching orthogonal programming paradigms. Which did you choose? Why? Blog and I&amp;#39;ll share.
&amp;mdash; Rosetta Code (@rosettacode) January 12, 2013 Interesting you should ask that, Rosetta Code. I’ve been pondering similar questions before, most recently inspired by Bruce Tate’s Seven Languages in Seven Weeks, whose languages of choice were sometimes overlapping (e.g. Io and Ruby) while leaving certain areas, such as concatenative languages, unexplored.</description></item><item><title>Test of Github as a Tutorial Hosting Platform - Literate Specifications with specs2</title><link>https://blog.mmakowski.com/technology/test-of-github-as-a-tutorial-hosting-platform-literate-specifications-with-specs2/</link><pubDate>Sun, 15 Jan 2012 00:00:00 +0000</pubDate><guid>https://blog.mmakowski.com/technology/test-of-github-as-a-tutorial-hosting-platform-literate-specifications-with-specs2/</guid><description>This is an experiment with how well Github is suited to host coding tutorials. Turns out that the navigation and presentation could be a bit better, but overall it seems to be fairly usable. And since the tutorial has the form of a git repository, we are not restricted to using Github, but can come up with software that is specifically designed to present the subsequent commits as steps of a tutorial… clearly, DVCS and self-contained repositories are very powerful ideas.</description></item><item><title>Scala LiftOff London 2011 - Day 1</title><link>https://blog.mmakowski.com/technology/scala-liftoff-london-2011-day-1/</link><pubDate>Sat, 15 Oct 2011 00:00:00 +0000</pubDate><guid>https://blog.mmakowski.com/technology/scala-liftoff-london-2011-day-1/</guid><description>Compared to last year’s LiftOff, which was an un-conference pretty much all the way, this year’s is split into morning, structured sessions, and afternoon open spaces resembling 2010 format. As usual, I tried to jot down the more interesting points from the day. The below is by no means a complete record and definitely suffers from insufficient editing and research (no time for that, sorry!). With this disclaimer out of the way:</description></item><item><title>Setting up BuildBot with Windows Slave on AWS EC2</title><link>https://blog.mmakowski.com/technology/setting-up-buildbot-with-windows-slave-on-aws-ec2/</link><pubDate>Mon, 15 Aug 2011 00:00:00 +0000</pubDate><guid>https://blog.mmakowski.com/technology/setting-up-buildbot-with-windows-slave-on-aws-ec2/</guid><description>Not long ago I set up a BuildBot instance for wxHaskell and thought about sharing my experience with configuring all the elements of the system. Johan Tibell’s commentary to the State of Haskell, 2011 survey, and his call for Windows bots to test Hackage libraries, prompted me to finally put my notes together into tutorial of a sort. There is nothing Haskell-specific, so if you are looking to automate Windows builds of apps written in any other language this guide should provide all the info you need.</description></item><item><title>Scala Exchange 2011 - Day 1</title><link>https://blog.mmakowski.com/technology/scala-exchange-2011-day-1/</link><pubDate>Fri, 15 Jul 2011 00:00:00 +0000</pubDate><guid>https://blog.mmakowski.com/technology/scala-exchange-2011-day-1/</guid><description>I’ve attended a day full of Scala-related talks at Scala Exchange 2011, and, as was the case with the previous events organised by SkillsMatter, I felt that relating what was said and what my impressions were will help me digest all the new pieces of information. So, here it goes.
State of Scala In the keynote talk Martin Odersky explained how his perception of usefulness of functional programming in the real world shifted from a good fit for XML manipulation to concurrent and parallel computing.</description></item><item><title>Functional Programming Exchange 2011</title><link>https://blog.mmakowski.com/technology/functional-programming-exchange-2011/</link><pubDate>Sun, 20 Mar 2011 00:00:00 +0000</pubDate><guid>https://blog.mmakowski.com/technology/functional-programming-exchange-2011/</guid><description>After the success that Scala LiftOff London 2010 was I didn’t hesitate long before signing up for a number of other Scala and functional programming events hosted by Skills Matter. The first of them was Functional Programming Exchange. Below are notes from most of the sessions of this one-day conference.
Managing Parallelism - Embrace Diversity The event started with Simon Peyton Jones discussing the importance of parallel computing, how different problems call for different approaches and how functional languages (and Haskell in particular) are well suited for the task.</description></item><item><title>Haskell MVC</title><link>https://blog.mmakowski.com/technology/haskell-mvc/</link><pubDate>Thu, 10 Mar 2011 00:00:00 +0000</pubDate><guid>https://blog.mmakowski.com/technology/haskell-mvc/</guid><description>with wxHaskell and STM
With popularity of Haskell raising in recent years I have decided to have a look at how suitable it is as a general-purpose programming language. The experiment involves writing a Windows client for FIBS.
It turned out to be far from easy.
It might be down to my lack of familiarity with functional programming patterns. Or perhaps, despite growing popularity, there are still no established FP GUI patterns yet.</description></item><item><title>Scala LiftOff London 2010 - Day 2</title><link>https://blog.mmakowski.com/technology/scala-liftoff-london-2010-day-2/</link><pubDate>Mon, 11 Oct 2010 00:00:00 +0000</pubDate><guid>https://blog.mmakowski.com/technology/scala-liftoff-london-2010-day-2/</guid><description>← Day One
The second and last day of Scala Lift Off did not disappoint. Compared to yesterday, the sessions I attended turned out to be less focussed on presenting concrete projects or results and more on discussing the language features and tools from the position of users discovering them. Overall, less structure, more interaction.
Teasers The day started with half an hour of very short talks by authors of a number of Scala-based projects.</description></item><item><title>Scala LiftOff London 2010 - Day 1</title><link>https://blog.mmakowski.com/technology/scala-liftoff-london-2010-day-1/</link><pubDate>Sun, 10 Oct 2010 00:00:00 +0000</pubDate><guid>https://blog.mmakowski.com/technology/scala-liftoff-london-2010-day-1/</guid><description>The first day of this year’s Scala Lift Off London exceeded my modest expectations. It was full of excellent presentations and interesting discussions attended by very friendly folk. I trust tomorrow will not be worse; in the mean time here are some notes from the sessions I attended.
Session 1: From Java to Scala Graham Tackley of guardian.co.uk told us about the experience of his team with embracing Scala. Guardian.co.uk had been a Java shop and when a project to provide API to access all of their content had been started their technology stack of choice was Java, Guice and Apache Solr.</description></item><item><title>E-mail Testing with Mock SMTP Server</title><link>https://blog.mmakowski.com/technology/e-mail-testing-with-mock-smtp-server/</link><pubDate>Fri, 20 Aug 2010 00:00:00 +0000</pubDate><guid>https://blog.mmakowski.com/technology/e-mail-testing-with-mock-smtp-server/</guid><description>If our application can send e-mail (and, according to Letts’ Law, it eventually will), we would want our integration tests to verify that the e-mail has indeed been sent, and that its contents are as expected. If we have written the integration tests in Python this will be pretty straightforward: Python library provides smtpd package with an implementation of SMTP server class, all we need to do is extend it to store the received messages and provide a way for the test code to verify that message has indeed been received.</description></item><item><title>Integration Testing with TeamCity</title><link>https://blog.mmakowski.com/technology/integration-testing-with-teamcity/</link><pubDate>Fri, 20 Aug 2010 00:00:00 +0000</pubDate><guid>https://blog.mmakowski.com/technology/integration-testing-with-teamcity/</guid><description>Inspired by a recent seminar Ken Schwaber presented at the company I work for, I decided to provide the means for ensuring that the high-level functionality of an application package built in our continuous integration environment (we use TeamCity) can be tested automatically.
The Context Suppose we are working on a stand-alone java app (let’s call it tc-rec, after the app I have been setting up integration tests for) and have an existing build which generates a zip file containing all the jars and scripts required to run the app.</description></item></channel></rss>